#!/usr/bin/python

import datetime
import json
import logging
import os
import platform
import plistlib
import subprocess
import sys
import syslog
import urllib
from distutils.version import LooseVersion

import Foundation
import SystemConfiguration

BUNDLE_ID = "com.grahamgilbert.crypt"
LOG_FILE = "/var/log/crypt.log"

logging.basicConfig(
    format="%(asctime)s - %(levelname)s: %(message)s",
    datefmt="%Y-%m-%d %I:%M:%S %p",
    level=logging.DEBUG,
    filename=LOG_FILE,
)
stdout_logging = logging.StreamHandler()
stdout_logging.setFormatter(logging.Formatter())
logging.getLogger().addHandler(stdout_logging)


def get_console_user():
    """returns the current console user via PyObjc"""
    cfuser = SystemConfiguration.SCDynamicStoreCopyConsoleUser(None, None, None)
    return cfuser[0]


def get_os_version(only_major_minor=True, as_tuple=False):
    """Returns an OS version.
    Args:
      only_major_minor: Boolean. If True, only include major/minor versions.
      as_tuple: Boolean. If True, return a tuple of ints, otherwise a string.
    100%, completely stolen from Munki.
    """
    os_version_tuple = platform.mac_ver()[0].split(".")
    if only_major_minor:
        os_version_tuple = os_version_tuple[0:2]
    if as_tuple:
        return tuple(map(int, os_version_tuple))
    else:
        return ".".join(os_version_tuple)


def set_pref(pref_name, pref_value):
    """Sets a preference, writing it to
        /Library/Preferences/com.grahamgilbert.crypt.plist.
        This should normally be used only for 'bookkeeping' values;
        values that control the behavior of crypt may be overridden
        elsewhere (by MCX, for example)"""
    try:
        Foundation.CFPreferencesSetValue(
            pref_name,
            pref_value,
            BUNDLE_ID,
            Foundation.kCFPreferencesAnyUser,
            Foundation.kCFPreferencesCurrentHost,
        )
        Foundation.CFPreferencesAppSynchronize(BUNDLE_ID)
    except Exception:
        pass


def pref(pref_name):
    """Return a preference. Since this uses CFPreferencesCopyAppValue,
    Preferences can be defined several places. Precedence is:
        - MCX
        - /var/root/Library/Preferences/com.grahamgilbert.crypt.plist
        - /Library/Preferences/com.grahamgilbert.crypt.plist
        - default_prefs defined here.
    """
    default_prefs = {
        "RemovePlist": True,
        "RotateUsedKey": True,
        "OutputPath": "/private/var/root/crypt_output.plist",
        "ValidateKey": True,
        "KeyEscrowInterval": 1,
        "AdditionalCurlOpts": [],
    }
    pref_value = Foundation.CFPreferencesCopyAppValue(pref_name, BUNDLE_ID)
    if pref_value is None:
        pref_value = default_prefs.get(pref_name)
        # we're using a default value. We'll write it out to
        # /Library/Preferences/<BUNDLE_ID>.plist for admin
        # discoverability
        set_pref(pref_name, pref_value)
    if isinstance(pref_value, Foundation.NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    elif isinstance(pref_value, Foundation.NSArray):
        pref_value = list(pref_value)
    return pref_value


def GetMacName():
    """
    Returns the name of the mac
    """
    cmd = ["/usr/sbin/scutil", "--get", "ComputerName"]
    try:
        return subprocess.check_output(cmd).rstrip()
    except subprocess.SubprocessError:
        return "UNKNOWN_COMPUTERNAME"


def curl_escape(s):
    return s.replace('"', '\\"')


def build_curl_config_file(d):
    lines = []
    for k, v in d.items():
        lines.append(f'{k} = "{curl_escape(v)}"')
    return "\n".join(lines)


def escrow_key(plist):
    logging.info("Attempting to Escrow Key...")
    server_url = pref("ServerURL")
    logging.debug(f"ServerURL Pref set to: {server_url}...")
    if server_url is None:
        return False
    if server_url.endswith("/"):
        theurl = server_url + "checkin/"
    else:
        theurl = server_url + "/checkin/"
    # In the future, we're going to submit the whole plist, but for now...
    serial = plist["SerialNumber"]
    key = plist["RecoveryKey"]
    username = plist["EnabledUser"]
    macname = GetMacName()
    mydata = [
        ("serial", serial),
        ("recovery_password", key),
        ("username", username),
        ("macname", macname),
    ]
    mydata = urllib.parse.urlencode(mydata)
    config_file = build_curl_config_file({"url": theurl, "data": mydata})
    # --fail: Fail silently (no output at all) on server errors.
    # --silent: Silent mode. Don't show progress meter or error messages.
    # --show-error: When used with silent, it makes curl show an error message
    # if it fails.
    # --location: This option will make curl redo the request on the new
    # location if the server responds with a 3xx code.
    # --config: Specify which config file to read curl arguments from.
    # The config file is a text file in which command line arguments can be
    # written which then will be used as if they were written on the actual
    # command line.
    cmd = ["/usr/bin/curl", "--fail", "--silent", "--show-error", "--location"]
    if all([pref("AdditionalCurlOpts"), isinstance(pref("AdditionalCurlOpts"), list)]):
        for curl_opt in pref("AdditionalCurlOpts"):
            cmd.append(curl_opt)
    cmd.extend(["--config", "-"])
    task = subprocess.Popen(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE
    )
    (output, error) = task.communicate(input=config_file.encode())

    if task.returncode == 0:
        logging.info("Key escrow successful.")
        server_initiated_rotation(output)
        return True
    else:
        logging.error("Key escrow unsuccessful.")
        return False


def server_initiated_rotation(output):
    """
    Rotate the key if the server tells us to.
    We need the old key to be present on disk and RotateUsedKey to be True
    """
    try:
        json_output = json.loads(output)
    except ValueError:
        return ""

    if not pref("RotateUsedKey") or pref("RemovePlist"):
        # Don't do anything if we don't care about the good stuff
        return ""

    output_plist = pref("OutputPath")
    if not os.path.isfile(output_plist):
        # Need this to be here too (which it should, but you never know..)
        return ""

    if json_output.get("rotation_required", False):
        logging.info("Removing output plist for rotation at next login.")
        os.remove(output_plist)

    post_run_command()


def using_recovery_key():
    """Check if FileVault is currently unlocked using
    the recovery key.
    """
    macos_version = get_os_version(only_major_minor=False, as_tuple=False)

    if LooseVersion(macos_version) >= LooseVersion("10.15"):
        logging.info(
            "Checking if using a recovery key is unstable on 10.15. " "Skipping."
        )
        return False

    cmd = ["/usr/bin/fdesetup", "usingrecoverykey"]
    try:
        using_key = subprocess.check_output(cmd).strip()
    except Exception:
        logging.warning("fdesetup usingrecoverykey failed to run correctly")
        return False
    if using_key == "true":
        logging.warning("Detected Recovery Key use.")
        return True
    else:
        return False


def post_run_command():
    run_command = pref("PostRunCommand")
    output_plist = pref("OutputPath")
    if run_command and not os.path.isfile(output_plist):
        logging.info(f"Running {run_command}")
        try:
            output = subprocess.check_output(run_command)
            logging.info(output)
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to run PostRunCommand: {e}")


def get_recovery_key(key_location):
    """Returns recovery key as a string... If we failed
    to get the proper information, returns an empty string"""
    # checks to see if recovery key preference is set

    try:
        with open(key_location, "rb") as fp:
            keyplist = plistlib.load(fp)
        return keyplist["RecoveryKey"].strip()
    except (FileNotFoundError, plistlib.InvalidFileException):
        logging.info(f"We had trouble getting info from {key_location}...")
        return ""
    except KeyError:
        logging.warning(f"Problem with Key: RecoveryKey in {key_location}...")
        return ""


def rotate_invalid_key(plist_path):
    """
    Will send the key (if present) for validation. If validation fails,
    it will remove the plist so the key can be regenerated at next login.
    Due to the bug that restricts the number of validations before reboot
    in versions of macOS prior to 10.12.5, this will only run there.
    """
    # a work aroud for https://github.com/grahamgilbert/crypt/issues/68
    if not get_console_user():
        logging.info("Skipping Validation, no user is logged in.")
        return True

    macos_version = get_os_version(only_major_minor=False, as_tuple=False)

    if LooseVersion("10.12.5") > LooseVersion(macos_version):
        logging.warning("macOS version is too old to run reliably")
        return False

    if os.path.isfile(plist_path):
        recovery_key = get_recovery_key(plist_path)
    else:
        logging.warning("Recovery key is not present on disk")
        return False

    if not recovery_key:
        logging.warning("Could not retrieve recovery key from plist.")
        os.remove(plist_path)
        return False

    if not validate_key(recovery_key):
        logging.info("Stored recovery key is not valid, removing from disk")
        os.remove(plist_path)
        return False

    logging.info("Stored recovery key is valid.")
    return True


def validate_key(current_key):
    """Validates the given recovery key against FileVault, returns True
    or False accordingly"""

    key = {"Password": current_key}
    input_plist = plistlib.dumps(key)
    cmd = subprocess.Popen(
        ["/usr/bin/fdesetup", "validaterecovery", "-inputplist"],
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    stdout_data, err = cmd.communicate(input=input_plist)
    if err:
        logging.error(err)
    if stdout_data.rstrip() == b"true":
        return True
    else:
        logging.error("Recovery Key could not be validated.")
        logging.error(f"Failed with Error: {stdout_data}")
        return False


def rotate_key(current_key, plist):
    """This rotates the recovery key to something new
    by using the current recovery key"""
    rotate_inputplist = {"Password": current_key}
    input_plist = plistlib.dumps(rotate_inputplist)
    cmd = subprocess.Popen(
        [
            "/usr/bin/fdesetup",
            "changerecovery",
            "-personal",
            "-outputplist",
            "-inputplist",
        ],
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    stdout_data, err = cmd.communicate(input=input_plist)
    logging.info("Attempting to rotate Recovery Key.")
    try:
        output_plist = plistlib.loads(stdout_data)
        with open(plist, "wb") as fp:
            plistlib.dump(output_plist, fp)
        logging.info("Recovery Key rotated.")
    except Exception:
        if err:
            logging.warning(f"Encountered error Key Rotation: {err}.")


def get_enabled_user():
    """Crypt needs an enabled user in its plist that our normal output
    doesn't give us so we need to add a user to the plist"""
    if pref("SkipUsers"):
        nonusers = pref("SkipUsers")
    else:
        nonusers = []
    fde_users = subprocess.check_output(["/usr/bin/fdesetup", "list"]).split("\n")
    for user in fde_users:
        if not user.split(",")[0] in nonusers:
            cryptuser = user.split(",")[0]
            break
    return cryptuser


def rotate_if_used(key_path):
    """Checks to see if the recovery key was used to unlock the machine
    if it was then use our current key to rotate it"""
    if not using_recovery_key():
        return ""
    if not os.path.isfile(key_path):
        logging.warning(f"Could not locate {key_path}")
        return ""
    logging.info("Recovery Key has been used.. Attempting to Rotate.")
    current_key = get_recovery_key(key_path)
    valid_key = validate_key(current_key)
    if not valid_key:
        logging.error("Our current key is not valid.")
        return ""
    rotate_key(current_key, key_path)


def main():
    plist_path = pref("OutputPath")
    logging.info(f"OutputPath Pref is set to: {plist_path}")
    if pref("RotateUsedKey"):
        rotate_if_used(plist_path)

    if pref("RotateUsedKey") and pref("ValidateKey") and not pref("RemovePlist"):
        rotate_invalid_key(plist_path)
        post_run_command()

    if os.path.isfile(plist_path):
        try:
            with open(plist_path, "rb") as fp:
                plist = plistlib.load(fp)
        except plistlib.InvalidFileException as err:
            logging.error(f"Failed to read {plist_path} with error: {err}")
            exit(-1)
        # Exit if we've run this within the last hour
        try:
            enableduser = plist["EnabledUser"]
        except KeyError as e:
            enableduser = get_console_user()
        skippedusers = ["root", "_mbsetupuser"]
        if not enableduser or enableduser in skippedusers:
            enableduser = get_enabled_user()
        plist["EnabledUser"] = enableduser
        if "last_run" in plist:
            try:
                escrow_interval = int(pref("KeyEscrowInterval"))
            except Exception:
                escrow_interval = 1
            logging.info(f"KeyEscrowInterval set to: {escrow_interval} hour(s)...")
            now = datetime.datetime.now()
            hour_ago = now - datetime.timedelta(hours=escrow_interval)
            if plist["last_run"] > hour_ago:
                logging.info(
                    f"We escrowed less than {escrow_interval} hour(s) ago. Skipping..."
                )
                sys.exit(0)
        escrow_result = escrow_key(plist=plist)
        if escrow_result and os.path.isfile(plist_path):
            remove_plist = pref("RemovePlist")
            plist["escrow_success"] = True
            plist["last_run"] = datetime.datetime.now()
            with open(plist_path, "wb") as fp:
                plistlib.dump(plist, fp)
            if remove_plist is True:
                logging.info("Removing plist due to configuration.")
                os.remove(plist_path)
            else:
                logging.info("Ensuring permissions on plist.")
                os.chmod(plist_path, 600)


if __name__ == "__main__":
    main()
